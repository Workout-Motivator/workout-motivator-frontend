name: Deploy to AKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CLUSTER_NAME: workout-motivator
  CLUSTER_RESOURCE_GROUP: WAP
  NAMESPACE: workout-motivator
  APP_NAME: workout-motivator-frontend
  ACR_NAME: workoutmotivatoracr
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
      
      - name: Build and push image to ACR
        run: |
          docker build . -t ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}/workout-motivator-frontend:${{ github.sha }} -t ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}/workout-motivator-frontend:latest \
            --build-arg REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }} \
            --build-arg REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }} \
            --build-arg REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }} \
            --build-arg REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }} \
            --build-arg REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }} \
            --build-arg REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }} \
            --build-arg REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }} \
            --build-arg REACT_APP_BACKEND_URL=/api
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}/workout-motivator-frontend:${{ github.sha }}
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}/workout-motivator-frontend:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      
      - name: Create namespace if doesn't exist
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create ACR pull secret
        run: |
          kubectl create secret docker-registry acr-secret \
            --namespace ${{ env.NAMESPACE }} \
            --docker-server=${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }} \
            --docker-username=${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} \
            --docker-password=${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Firebase configuration secret
        run: |
          kubectl create secret generic firebase-config \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=REACT_APP_FIREBASE_API_KEY=${{ secrets.REACT_APP_FIREBASE_API_KEY }} \
            --from-literal=REACT_APP_FIREBASE_AUTH_DOMAIN=${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }} \
            --from-literal=REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }} \
            --from-literal=REACT_APP_FIREBASE_STORAGE_BUCKET=${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }} \
            --from-literal=REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }} \
            --from-literal=REACT_APP_FIREBASE_APP_ID=${{ secrets.REACT_APP_FIREBASE_APP_ID }} \
            --from-literal=REACT_APP_FIREBASE_MEASUREMENT_ID=${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Check current deployment version
        run: |
          echo "Current deployment version:"
          kubectl get deployment ${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} -o=jsonpath='{.spec.template.spec.containers[0].image}'
          echo -e "\nDeploying new version: ${{ github.sha }}"

      - name: Deploy to AKS
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            kubernetes/deployment.yml
            kubernetes/service.yml
          images: |
            ${{ secrets.AZURE_CONTAINER_REGISTRY_SERVER }}/workout-motivator-frontend:${{ github.sha }}
          namespace: ${{ env.NAMESPACE }}

      - name: Verify deployment
        run: |
          echo "Deployment complete. New version details:"
          kubectl get deployment ${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} -o=jsonpath='{.spec.template.spec.containers[0].image}'
          
          echo "Waiting for deployment to be fully rolled out..."
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Run k6 load test
        run: |
          echo "Running load test on new deployment..."
          docker run --rm -i grafana/k6 run - <k6/homepage.js

      - name: Check k6 results
        if: always()
        run: |
          echo "Load test complete. Check the logs above for detailed results."
